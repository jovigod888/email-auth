import { Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';

const users = [
  {
    id: 1,
    email: 'user@example.com',
    password: bcrypt.hashSync('password', 8)
  }
];

const secret = 'your_jwt_secret';

export const login = (req: Request, res: Response) => {
  const { email, password } = req.body;
  const user = users.find(u => u.email === email);
  
  if (!user) {
    return res.status(404).send('User not found');
  }
  
  const passwordIsValid = bcrypt.compareSync(password, user.password);
  
  if (!passwordIsValid) {
    return res.status(401).send('Invalid password');
  }
  
  const token = jwt.sign({ id: user.id }, secret, {
    expiresIn: 86400 // 24 hours
  });
  
  res.status(200).send({ auth: true, token });
};


import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';

const secret = 'your_jwt_secret';

export const verifyToken = (req: Request, res: Response, next: NextFunction) => {
  const token = req.headers['x-access-token'] as string;
  
  if (!token) {
    return res.status(403).send({ auth: false, message: 'No token provided.' });
  }
  
  jwt.verify(token, secret, (err, decoded) => {
    if (err) {
      return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });
    }
    
    req.body.userId = decoded.id;
    next();
  });
};


"scripts": {
  "start": "ts-node-dev src/index.ts"
}


""" npm start
